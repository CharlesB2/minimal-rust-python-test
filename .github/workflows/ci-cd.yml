name: Minimal Rust Python CI/CD

on:
  push:
    branches: [main, master]
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [main, master]

jobs:
  build:
    runs-on: ${{ matrix.conf.os }}
    name: ${{ matrix.conf.os }}-${{ matrix.python-version }}-${{ matrix.conf.target-triple }}-${{ matrix.conf.target }}
    strategy:
      matrix:
        python-version: ['3.12']
        conf:
          - { os: ubuntu-latest, target: source }
          - { os: ubuntu-latest, target: x86_64,  target-triple: x86_64-unknown-linux-gnu,             manylinux: auto }
          - { os: ubuntu-latest, target: x86_64,  target-triple: x86_64-unknown-linux-musl,            manylinux: musllinux_1_1 }
          - { os: ubuntu-latest, target: i686,    target-triple: i686-unknown-linux-gnu,               manylinux: auto }
          - { os: ubuntu-latest, target: i686,    target-triple: i686-unknown-linux-musl,              manylinux: musllinux_1_1 }
          - { os: ubuntu-latest, target: aarch64, target-triple: aarch64-unknown-linux-gnu,            manylinux: auto }
          - { os: ubuntu-latest, target: aarch64, target-triple: aarch64-unknown-linux-musl,           manylinux: musllinux_1_1 }

          - { os: macos-13, target: x86_64,     target-triple: x86_64-apple-darwin }
          - { os: macos-13, target: aarch64,    target-triple: aarch64-apple-darwin }
          - { os: macos-13, target: universal2, target-triple: x86_64-apple-darwin }

          - { os: windows-latest, target: x86_64, target-triple: x86_64-pc-windows-msvc, python-architecture: x64 }
          - { os: windows-latest, target: i686,   target-triple: i686-pc-windows-msvc,   python-architecture: x86 }

    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheel
        if: !startsWith(matrix.conf.manylinux, 'musl')
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.conf.target }}
          manylinux: ${{ matrix.conf.manylinux }}
          args: -i ${{ matrix.python-version }} --release --auditwheel check
      - name: Build wheel -usl
        if: startsWith(matrix.conf.manylinux, 'musl') && matrix.conf.target != 'source'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.conf.target }}
          manylinux: ${{ matrix.conf.manylinux }}
          args: -i ${{ matrix.python-version }} --release --auditwheel repair
      - name: Build wheels for older linux versions
        if: runner.os == 'ubuntu-latest' && matrix.conf.target == 'source'
        # Build a wheel for the current python version in release mode
        # When running on linux, use zig to build the oldest possible manylinux wheel
        # In addition, check the wheel with auditwheel, but without auto-repair
        run: maturin build --release --compatibility --zig --auditwheel check
      - name: Build sdistx
        if: runner.os == 'ubuntu-latest' && matrix.conf.target == 'source' && matrix.python-version == '3.9'
        run: maturin sdist
      - name: Display structure of built files
        run: ls -R target/wheels

      # Could use 'distro: alpine_latest' in 'run-on-arch-action' but seems difficult to install a specific version of python
      # so we'll just use existing python alpine images to test import and cli use w/o testing archs other than x86_64
      - name: Install built wheel and Test (musllinux)
        if: startsWith(matrix.conf.manylinux, 'musl') && matrix.conf.target == 'x86_64'
        run: |
          docker run \
            -v $(pwd)/target/wheels:/wheels \
            --rm python:${{ matrix.python-version }}-alpine sh \
              -c "pip install fastuuid --no-index --find-links /wheels && python -c 'import fastuuid'"
      - name: Install built wheel and Test (Native)
        if: |
          !startsWith(matrix.conf.manylinux, 'musl') && 
          !( matrix.python-version == 'pypy3.10' && runner.os == 'Windows' ) &&
          ( matrix.conf.target == 'x86_64' || matrix.conf.target == 'universal2' )
        run: |
          # Second install guarantees it's going to install from local dir w/ --no-index
          # use first to get in dev dependencies
          python -m pip install fastuuid --find-links target/wheels --force-reinstall
          python -c "import fastuuid; print('Package imported successfully')"
