name: Minimal Rust Python CI/CD

on:
  push:
    branches: [main, master]
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          # Standard OS tests
          - runner: ubuntu-latest
            os: ubuntu-latest
          - runner: windows-latest
            os: windows-latest
          - runner: macos-latest
            os: macos-latest
          # Alpine Linux (musl) tests
          - runner: ubuntu-latest
            os: alpine
            container: alpine:latest
#        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v5
      - name: echo
        run: |
          echo "path: $PATH"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: echo
        run: |
          echo "path: $PATH"
          echo "Runner: ${{ matrix.runner }}"
          echo "OS: ${{ matrix.os }}"
          if [ -n "${{ matrix.target }}" ]; then
            echo "Target: ${{ matrix.target }}"
          fi
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox==3.28.0 tox-gh-actions==2.12.0 tox-pyo3 maturin
      - name: Run tests
        run: tox

  build:
    needs: test
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # AMD64 builds
          - runner: ubuntu-latest
            arch: amd64
          - runner: windows-latest
            arch: amd64
          - runner: macos-13
            arch: amd64
          # ARM64 builds
          - runner: ubuntu-latest-arm64
            arch: arm64
          - runner: macos-latest
            arch: arm64
          # MUSL builds
          - runner: ubuntu-latest
            arch: amd64
            target: x86_64-unknown-linux-musl
          - runner: ubuntu-latest
            arch: arm64
            target: aarch64-unknown-linux-musl
#        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install maturin[zig] twine
      - name: Install musl tools
        if: matrix.target && contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          rustup target add ${{ matrix.target }}
      - name: Build wheels
        run: |
          if [ -n "${{ matrix.target }}" ]; then
            maturin build --release --target ${{ matrix.target }}
          else
            maturin build --release
          fi
      - name: Build wheels for older linux versions
        if: runner.os == 'Linux' && !matrix.target
        # Build a wheel for the current python version in release mode
        # When running on linux, use zig to build the oldest possible manylinux wheel
        # In addition, check the wheel with auditwheel, but without auto-repair
        run: maturin build --release --compatibility --zig --auditwheel check
      - name: Build sdist
        if: runner.os == 'Linux' && !matrix.target && matrix.python-version == '3.9'
        run: maturin sdist
      - name: Display structure of built files
        run: ls -R target/wheels

  build-and-publish:
    needs: test
    runs-on: ${{ matrix.runner }}
    if: github.event_name == 'push' && contains(github.ref, '.')
    strategy:
      matrix:
        include:
          # AMD64 builds
          - runner: ubuntu-latest
            arch: amd64
          - runner: windows-latest
            arch: amd64
          - runner: macos-13
            arch: amd64
          # ARM64 builds
          - runner: ubuntu-latest-arm64
            arch: arm64
          - runner: macos-latest
            arch: arm64
          # MUSL builds
          - runner: ubuntu-latest
            arch: amd64
            target: x86_64-unknown-linux-musl
          - runner: ubuntu-latest
            arch: arm64
            target: aarch64-unknown-linux-musl
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install maturin[zig] twine
      - name: Install musl tools
        if: matrix.target && contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          rustup target add ${{ matrix.target }}
      - name: Build wheels
        run: |
          if [ -n "${{ matrix.target }}" ]; then
            maturin build --release --target ${{ matrix.target }}
          else
            maturin build --release
          fi
      - name: Build wheels for older linux versions
        if: runner.os == 'Linux' && !matrix.target
        # Build a wheel for the current python version in release mode
        # When running on linux, use zig to build the oldest possible manylinux wheel
        # In addition, check the wheel with auditwheel, but without auto-repair
        run: maturin build --release --compatibility --zig --auditwheel check
      - name: Build sdist
        if: runner.os == 'Linux' && !matrix.target && matrix.python-version == '3.9'
        run: maturin sdist
      - name: Display structure of built files
        run: ls -R target/wheels
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload target/wheels/*